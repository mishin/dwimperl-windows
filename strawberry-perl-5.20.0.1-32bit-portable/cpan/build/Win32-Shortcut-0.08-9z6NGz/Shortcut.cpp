/*
 * This file was generated automatically by ExtUtils::ParseXS version 3.24 from the
 * contents of Shortcut.xs. Do not edit this file, edit Shortcut.xs instead.
 *
 *    ANY CHANGES MADE HERE WILL BE LOST!
 *
 */

#line 1 "Shortcut.xs"
/*
 * Shortcut.CPP
 * 15 Jan 97 by Aldo Calpini <dada@perl.it>
 *
 * XS interface to the Win32 IShellLink Interface
 * based on Registry.CPP written by Jesse Dougherty
 *
 * Version: 0.03 07 Apr 97
 *
 */

#define  WIN32_LEAN_AND_MEAN
#include <stdlib.h>
#include <math.h>
#include <windows.h>

#include <shlobj.h>
#include <shlguid.h>
#include <objbase.h>

#if defined(__cplusplus)
extern "C" {
#endif
#include "EXTERN.h"
#include "perl.h"
#include "XSUB.h"
#if defined(__cplusplus)
}
#endif

#ifndef _WIN64
#  define DWORD_PTR	DWORD
#endif

// Section for the constant definitions.
#define CROAK croak
#define MAX_LENGTH 2048
#define TMPBUFSZ 1024


DWORD
constant(char *name, int arg)
{
    errno = 0;
    switch (*name) {
    case 'A':
		break;
    case 'B':
		break;
	case 'C':
		break;
    case 'D':
		break;
    case 'E':
		break;
    case 'F':
		break;
    case 'G':
		break;
    case 'H':
		break;
    case 'I':
		break;
    case 'J':
		break;
    case 'K':
		break;
    case 'L':
		break;
    case 'M':
		break;
    case 'N':
		break;
    case 'O':
		break;
    case 'P':
		break;
    case 'Q':
		break;
    case 'R':
		break;
    case 'S':
		if (strncmp(name, "SLGP_", 5) == 0)
			switch(name[5]) {	
			case 'S':
				if (strEQ(name, "SLGP_SHORTPATH"))
					#ifdef SLGP_SHORTPATH
						return SLGP_SHORTPATH;
					#else
						goto not_there;
					#endif
				break;
			case 'U':
				if (strEQ(name, "SLGP_UNCPRIORITY"))
					#ifdef SLGP_UNCPRIORITY
						return SLGP_UNCPRIORITY;
					#else
						goto not_there;
					#endif
				break;
			}
		if (strncmp(name, "SW_", 3) == 0)
			switch(name[3]) {	
			case 'H':
				if (strEQ(name, "SW_HIDE"))
					#ifdef SW_HIDE
						return SW_HIDE;
					#else
						goto not_there;
					#endif
				break;
			case 'M':
				if (strEQ(name, "SW_MINIMIZE"))
					#ifdef SW_MINIMIZE
						return SW_MINIMIZE;
					#else
						goto not_there;
					#endif
				break;
			case 'R':
				if (strEQ(name, "SW_RESTORE"))
					#ifdef SW_RESTORE
						return SW_RESTORE;
					#else
						goto not_there;
					#endif
				break;
			case 'S':
				if (strEQ(name, "SW_SHOW"))
					#ifdef SW_SHOW
						return SW_SHOW;
					#else
						goto not_there;
					#endif
				if (strEQ(name, "SW_SHOWMAXIMIZED"))
					#ifdef SW_SHOWMAXIMIZED
						return SW_SHOWMAXIMIZED;
					#else
						goto not_there;
					#endif
				if (strEQ(name, "SW_SHOWMINIMIZED"))
					#ifdef SW_SHOWMINIMIZED
						return SW_SHOWMINIMIZED;
					#else
						goto not_there;
					#endif
				if (strEQ(name, "SW_SHOWMINNOACTIVE"))
					#ifdef SW_SHOWMINNOACTIVE
						return SW_SHOWMINNOACTIVE;
					#else
						goto not_there;
					#endif
				if (strEQ(name, "SW_SHOWNA"))
					#ifdef SW_SHOWNA
						return SW_SHOWNA;
					#else
						goto not_there;
					#endif
				if (strEQ(name, "SW_SHOWNOACTIVE"))
					#ifdef SW_SHOWNOACTIVE
						return SW_SHOWNOACTIVE;
					#else
						goto not_there;
					#endif
				if (strEQ(name, "SW_SHOWNORMAL"))
					#ifdef SW_SHOWNORMAL
						return SW_SHOWNORMAL;
					#else
						goto not_there;
					#endif
				break;
			}
		break;
    case 'T':
		break;
    case 'U':
		break;
    case 'V':
		break;
    case 'W':
		break;
    case 'X':
		break;
    case 'Y':
		break;
    case 'Z':
		break;
    }
    errno = EINVAL;
    return 0;

not_there:
    errno = ENOENT;
    return 0;
}

#line 207 "Shortcut.c"
#ifndef PERL_UNUSED_VAR
#  define PERL_UNUSED_VAR(var) if (0) var = var
#endif

#ifndef dVAR
#  define dVAR		dNOOP
#endif


/* This stuff is not part of the API! You have been warned. */
#ifndef PERL_VERSION_DECIMAL
#  define PERL_VERSION_DECIMAL(r,v,s) (r*1000000 + v*1000 + s)
#endif
#ifndef PERL_DECIMAL_VERSION
#  define PERL_DECIMAL_VERSION \
	  PERL_VERSION_DECIMAL(PERL_REVISION,PERL_VERSION,PERL_SUBVERSION)
#endif
#ifndef PERL_VERSION_GE
#  define PERL_VERSION_GE(r,v,s) \
	  (PERL_DECIMAL_VERSION >= PERL_VERSION_DECIMAL(r,v,s))
#endif
#ifndef PERL_VERSION_LE
#  define PERL_VERSION_LE(r,v,s) \
	  (PERL_DECIMAL_VERSION <= PERL_VERSION_DECIMAL(r,v,s))
#endif

/* XS_INTERNAL is the explicit static-linkage variant of the default
 * XS macro.
 *
 * XS_EXTERNAL is the same as XS_INTERNAL except it does not include
 * "STATIC", ie. it exports XSUB symbols. You probably don't want that
 * for anything but the BOOT XSUB.
 *
 * See XSUB.h in core!
 */


/* TODO: This might be compatible further back than 5.10.0. */
#if PERL_VERSION_GE(5, 10, 0) && PERL_VERSION_LE(5, 15, 1)
#  undef XS_EXTERNAL
#  undef XS_INTERNAL
#  if defined(__CYGWIN__) && defined(USE_DYNAMIC_LOADING)
#    define XS_EXTERNAL(name) __declspec(dllexport) XSPROTO(name)
#    define XS_INTERNAL(name) STATIC XSPROTO(name)
#  endif
#  if defined(__SYMBIAN32__)
#    define XS_EXTERNAL(name) EXPORT_C XSPROTO(name)
#    define XS_INTERNAL(name) EXPORT_C STATIC XSPROTO(name)
#  endif
#  ifndef XS_EXTERNAL
#    if defined(HASATTRIBUTE_UNUSED) && !defined(__cplusplus)
#      define XS_EXTERNAL(name) void name(pTHX_ CV* cv __attribute__unused__)
#      define XS_INTERNAL(name) STATIC void name(pTHX_ CV* cv __attribute__unused__)
#    else
#      ifdef __cplusplus
#        define XS_EXTERNAL(name) extern "C" XSPROTO(name)
#        define XS_INTERNAL(name) static XSPROTO(name)
#      else
#        define XS_EXTERNAL(name) XSPROTO(name)
#        define XS_INTERNAL(name) STATIC XSPROTO(name)
#      endif
#    endif
#  endif
#endif

/* perl >= 5.10.0 && perl <= 5.15.1 */


/* The XS_EXTERNAL macro is used for functions that must not be static
 * like the boot XSUB of a module. If perl didn't have an XS_EXTERNAL
 * macro defined, the best we can do is assume XS is the same.
 * Dito for XS_INTERNAL.
 */
#ifndef XS_EXTERNAL
#  define XS_EXTERNAL(name) XS(name)
#endif
#ifndef XS_INTERNAL
#  define XS_INTERNAL(name) XS(name)
#endif

/* Now, finally, after all this mess, we want an ExtUtils::ParseXS
 * internal macro that we're free to redefine for varying linkage due
 * to the EXPORT_XSUB_SYMBOLS XS keyword. This is internal, use
 * XS_EXTERNAL(name) or XS_INTERNAL(name) in your code if you need to!
 */

#undef XS_EUPXS
#if defined(PERL_EUPXS_ALWAYS_EXPORT)
#  define XS_EUPXS(name) XS_EXTERNAL(name)
#else
   /* default to internal */
#  define XS_EUPXS(name) XS_INTERNAL(name)
#endif

#ifndef PERL_ARGS_ASSERT_CROAK_XS_USAGE
#define PERL_ARGS_ASSERT_CROAK_XS_USAGE assert(cv); assert(params)

/* prototype to pass -Wmissing-prototypes */
STATIC void
S_croak_xs_usage(pTHX_ const CV *const cv, const char *const params);

STATIC void
S_croak_xs_usage(pTHX_ const CV *const cv, const char *const params)
{
    const GV *const gv = CvGV(cv);

    PERL_ARGS_ASSERT_CROAK_XS_USAGE;

    if (gv) {
        const char *const gvname = GvNAME(gv);
        const HV *const stash = GvSTASH(gv);
        const char *const hvname = stash ? HvNAME(stash) : NULL;

        if (hvname)
            Perl_croak(aTHX_ "Usage: %s::%s(%s)", hvname, gvname, params);
        else
            Perl_croak(aTHX_ "Usage: %s(%s)", gvname, params);
    } else {
        /* Pants. I don't think that it should be possible to get here. */
        Perl_croak(aTHX_ "Usage: CODE(0x%"UVxf")(%s)", PTR2UV(cv), params);
    }
}
#undef  PERL_ARGS_ASSERT_CROAK_XS_USAGE

#ifdef PERL_IMPLICIT_CONTEXT
#define croak_xs_usage(a,b)    S_croak_xs_usage(aTHX_ a,b)
#else
#define croak_xs_usage        S_croak_xs_usage
#endif

#endif

/* NOTE: the prototype of newXSproto() is different in versions of perls,
 * so we define a portable version of newXSproto()
 */
#ifdef newXS_flags
#define newXSproto_portable(name, c_impl, file, proto) newXS_flags(name, c_impl, file, proto, 0)
#else
#define newXSproto_portable(name, c_impl, file, proto) (PL_Sv=(SV*)newXS(name, c_impl, file), sv_setpv(PL_Sv, proto), (CV*)PL_Sv)
#endif /* !defined(newXS_flags) */

#line 349 "Shortcut.c"

XS_EUPXS(XS_Win32__Shortcut_constant); /* prototype to pass -Wmissing-prototypes */
XS_EUPXS(XS_Win32__Shortcut_constant)
{
    dVAR; dXSARGS;
    if (items != 2)
       croak_xs_usage(cv,  "name, arg");
    {
	char *	name = (char *)SvPV_nolen(ST(0))
;
	int	arg = (int)SvIV(ST(1))
;
	long	RETVAL;
	dXSTARG;
#line 209 "Shortcut.xs"
    RETVAL = constant(name, arg);
#line 366 "Shortcut.c"
	XSprePUSH; PUSHi((IV)RETVAL);
    }
    XSRETURN(1);
}


XS_EUPXS(XS_Win32__Shortcut__Instance); /* prototype to pass -Wmissing-prototypes */
XS_EUPXS(XS_Win32__Shortcut__Instance)
{
    dVAR; dXSARGS;
    PERL_UNUSED_VAR(cv); /* -W */
    PERL_UNUSED_VAR(ax); /* -Wall */
    SP -= items;
    {
#line 217 "Shortcut.xs"
    HRESULT hres;
    IShellLink* ilink;

    hres = CoCreateInstance(CLSID_ShellLink, NULL, CLSCTX_INPROC_SERVER,
                              IID_IShellLink, (void **) &ilink);
    EXTEND(SP,2);
    if (SUCCEEDED(hres)) {
	IPersistFile* ifile;
	hres = ilink->QueryInterface(IID_IPersistFile, (void **) &ifile);
	if (SUCCEEDED(hres)) {
	    ST(0)=sv_2mortal(newSViv((DWORD_PTR) ilink));
	    ST(1)=sv_2mortal(newSViv((DWORD_PTR) ifile));
	    XSRETURN(2);
	}
	XSRETURN_NO;
    }
    XSRETURN_NO;
#line 399 "Shortcut.c"
	PUTBACK;
	return;
    }
}


XS_EUPXS(XS_Win32__Shortcut__Release); /* prototype to pass -Wmissing-prototypes */
XS_EUPXS(XS_Win32__Shortcut__Release)
{
    dVAR; dXSARGS;
    if (items != 2)
       croak_xs_usage(cv,  "ilink, ifile");
    PERL_UNUSED_VAR(ax); /* -Wall */
    SP -= items;
    {
	IShellLink *	ilink = INT2PTR(IShellLink *, SvIV(ST(0)))
;
	IPersistFile *	ifile = INT2PTR(IPersistFile *, SvIV(ST(1)))
;
#line 241 "Shortcut.xs"
    ifile->Release();
    ilink->Release();
    XSRETURN_YES;
#line 423 "Shortcut.c"
	PUTBACK;
	return;
    }
}


XS_EUPXS(XS_Win32__Shortcut__SetDescription); /* prototype to pass -Wmissing-prototypes */
XS_EUPXS(XS_Win32__Shortcut__SetDescription)
{
    dVAR; dXSARGS;
    if (items != 3)
       croak_xs_usage(cv,  "ilink, ifile, description");
    PERL_UNUSED_VAR(ax); /* -Wall */
    SP -= items;
    {
	IShellLink *	ilink = INT2PTR(IShellLink *, SvIV(ST(0)))
;
	IPersistFile *	ifile = INT2PTR(IPersistFile *, SvIV(ST(1)))
;
	LPCSTR	description = (LPCSTR)SvPV_nolen(ST(2))
;
#line 252 "Shortcut.xs"
    HRESULT hres;
    hres = ilink->SetDescription(description);
    if (SUCCEEDED(hres))
	XSRETURN_YES;
    else
	XSRETURN_NO;
#line 452 "Shortcut.c"
	PUTBACK;
	return;
    }
}


XS_EUPXS(XS_Win32__Shortcut__GetDescription); /* prototype to pass -Wmissing-prototypes */
XS_EUPXS(XS_Win32__Shortcut__GetDescription)
{
    dVAR; dXSARGS;
    if (items != 2)
       croak_xs_usage(cv,  "ilink, ifile");
    PERL_UNUSED_VAR(ax); /* -Wall */
    SP -= items;
    {
	IShellLink *	ilink = INT2PTR(IShellLink *, SvIV(ST(0)))
;
	IPersistFile *	ifile = INT2PTR(IPersistFile *, SvIV(ST(1)))
;
#line 265 "Shortcut.xs"
    HRESULT hres;
    char description[1024];
    hres = ilink->GetDescription(description, 1024);
    if (SUCCEEDED(hres))
	XSRETURN_PV(description);
    else
	XSRETURN_NO;
#line 480 "Shortcut.c"
	PUTBACK;
	return;
    }
}


XS_EUPXS(XS_Win32__Shortcut__SetPath); /* prototype to pass -Wmissing-prototypes */
XS_EUPXS(XS_Win32__Shortcut__SetPath)
{
    dVAR; dXSARGS;
    if (items != 3)
       croak_xs_usage(cv,  "ilink, ifile, path");
    PERL_UNUSED_VAR(ax); /* -Wall */
    SP -= items;
    {
	IShellLink *	ilink = INT2PTR(IShellLink *, SvIV(ST(0)))
;
	IPersistFile *	ifile = INT2PTR(IPersistFile *, SvIV(ST(1)))
;
	LPCSTR	path = (LPCSTR)SvPV_nolen(ST(2))
;
#line 280 "Shortcut.xs"
    HRESULT hres;
    hres = ilink->SetPath(path);
    if (SUCCEEDED(hres))
	XSRETURN_YES;
    else
	XSRETURN_NO;
#line 509 "Shortcut.c"
	PUTBACK;
	return;
    }
}


XS_EUPXS(XS_Win32__Shortcut__GetPath); /* prototype to pass -Wmissing-prototypes */
XS_EUPXS(XS_Win32__Shortcut__GetPath)
{
    dVAR; dXSARGS;
    if (items != 3)
       croak_xs_usage(cv,  "ilink, ifile, flags");
    PERL_UNUSED_VAR(ax); /* -Wall */
    SP -= items;
    {
	IShellLink *	ilink = INT2PTR(IShellLink *, SvIV(ST(0)))
;
	IPersistFile *	ifile = INT2PTR(IPersistFile *, SvIV(ST(1)))
;
	DWORD	flags = INT2PTR(DWORD, SvIV(ST(2)))
;
#line 293 "Shortcut.xs"
    HRESULT hres;
    char path[MAX_PATH];
    WIN32_FIND_DATA file;

    hres = ilink->GetPath((LPSTR) path, MAX_PATH, &file, flags);
    if (SUCCEEDED(hres))
	XSRETURN_PV(path);
    else
	XSRETURN_NO;
#line 541 "Shortcut.c"
	PUTBACK;
	return;
    }
}


XS_EUPXS(XS_Win32__Shortcut__SetArguments); /* prototype to pass -Wmissing-prototypes */
XS_EUPXS(XS_Win32__Shortcut__SetArguments)
{
    dVAR; dXSARGS;
    if (items != 3)
       croak_xs_usage(cv,  "ilink, ifile, arguments");
    PERL_UNUSED_VAR(ax); /* -Wall */
    SP -= items;
    {
	IShellLink *	ilink = INT2PTR(IShellLink *, SvIV(ST(0)))
;
	IPersistFile *	ifile = INT2PTR(IPersistFile *, SvIV(ST(1)))
;
	LPCSTR	arguments = (LPCSTR)SvPV_nolen(ST(2))
;
#line 310 "Shortcut.xs"
    HRESULT hres;
    hres=ilink->SetArguments(arguments);
    if (SUCCEEDED(hres))
	XSRETURN_YES;
    else
	XSRETURN_NO;
#line 570 "Shortcut.c"
	PUTBACK;
	return;
    }
}


XS_EUPXS(XS_Win32__Shortcut__GetArguments); /* prototype to pass -Wmissing-prototypes */
XS_EUPXS(XS_Win32__Shortcut__GetArguments)
{
    dVAR; dXSARGS;
    if (items != 2)
       croak_xs_usage(cv,  "ilink, ifile");
    PERL_UNUSED_VAR(ax); /* -Wall */
    SP -= items;
    {
	IShellLink *	ilink = INT2PTR(IShellLink *, SvIV(ST(0)))
;
	IPersistFile *	ifile = INT2PTR(IPersistFile *, SvIV(ST(1)))
;
#line 323 "Shortcut.xs"
    HRESULT hres;
    char arguments[1024];
    hres = ilink->GetArguments((LPSTR) arguments, 1024);
    if (SUCCEEDED(hres))
	XSRETURN_PV(arguments);
    else
	XSRETURN_NO;
#line 598 "Shortcut.c"
	PUTBACK;
	return;
    }
}


XS_EUPXS(XS_Win32__Shortcut__SetWorkingDirectory); /* prototype to pass -Wmissing-prototypes */
XS_EUPXS(XS_Win32__Shortcut__SetWorkingDirectory)
{
    dVAR; dXSARGS;
    if (items != 3)
       croak_xs_usage(cv,  "ilink, ifile, dir");
    PERL_UNUSED_VAR(ax); /* -Wall */
    SP -= items;
    {
	IShellLink *	ilink = INT2PTR(IShellLink *, SvIV(ST(0)))
;
	IPersistFile *	ifile = INT2PTR(IPersistFile *, SvIV(ST(1)))
;
	LPCSTR	dir = (LPCSTR)SvPV_nolen(ST(2))
;
#line 338 "Shortcut.xs"
    HRESULT hres;
    hres = ilink->SetWorkingDirectory(dir);
    if (SUCCEEDED(hres))
	XSRETURN_YES;
    else
	XSRETURN_NO;
#line 627 "Shortcut.c"
	PUTBACK;
	return;
    }
}


XS_EUPXS(XS_Win32__Shortcut__GetWorkingDirectory); /* prototype to pass -Wmissing-prototypes */
XS_EUPXS(XS_Win32__Shortcut__GetWorkingDirectory)
{
    dVAR; dXSARGS;
    if (items != 2)
       croak_xs_usage(cv,  "ilink, ifile");
    PERL_UNUSED_VAR(ax); /* -Wall */
    SP -= items;
    {
	IShellLink *	ilink = INT2PTR(IShellLink *, SvIV(ST(0)))
;
	IPersistFile *	ifile = INT2PTR(IPersistFile *, SvIV(ST(1)))
;
#line 351 "Shortcut.xs"
    HRESULT hres;
    char dir[MAX_PATH];
    hres = ilink->GetWorkingDirectory((LPSTR) dir, MAX_PATH);
    if (SUCCEEDED(hres))
	XSRETURN_PV(dir);
    else
	XSRETURN_NO;
#line 655 "Shortcut.c"
	PUTBACK;
	return;
    }
}


XS_EUPXS(XS_Win32__Shortcut__SetShowCmd); /* prototype to pass -Wmissing-prototypes */
XS_EUPXS(XS_Win32__Shortcut__SetShowCmd)
{
    dVAR; dXSARGS;
    if (items != 3)
       croak_xs_usage(cv,  "ilink, ifile, flag");
    PERL_UNUSED_VAR(ax); /* -Wall */
    SP -= items;
    {
	IShellLink *	ilink = INT2PTR(IShellLink *, SvIV(ST(0)))
;
	IPersistFile *	ifile = INT2PTR(IPersistFile *, SvIV(ST(1)))
;
	int	flag = (int)SvIV(ST(2))
;
#line 366 "Shortcut.xs"
    HRESULT hres;
    hres = ilink->SetShowCmd(flag);
    if (SUCCEEDED(hres))
	XSRETURN_YES;
    else
	XSRETURN_NO;
#line 684 "Shortcut.c"
	PUTBACK;
	return;
    }
}


XS_EUPXS(XS_Win32__Shortcut__GetShowCmd); /* prototype to pass -Wmissing-prototypes */
XS_EUPXS(XS_Win32__Shortcut__GetShowCmd)
{
    dVAR; dXSARGS;
    if (items != 2)
       croak_xs_usage(cv,  "ilink, ifile");
    PERL_UNUSED_VAR(ax); /* -Wall */
    SP -= items;
    {
	IShellLink *	ilink = INT2PTR(IShellLink *, SvIV(ST(0)))
;
	IPersistFile *	ifile = INT2PTR(IPersistFile *, SvIV(ST(1)))
;
#line 379 "Shortcut.xs"
    HRESULT hres;
    int show;
    hres = ilink->GetShowCmd(&show);
    if (SUCCEEDED(hres))
	XSRETURN_IV(show);
    else
	XSRETURN_NO;
#line 712 "Shortcut.c"
	PUTBACK;
	return;
    }
}


XS_EUPXS(XS_Win32__Shortcut__SetHotkey); /* prototype to pass -Wmissing-prototypes */
XS_EUPXS(XS_Win32__Shortcut__SetHotkey)
{
    dVAR; dXSARGS;
    if (items != 3)
       croak_xs_usage(cv,  "ilink, ifile, hotkey");
    PERL_UNUSED_VAR(ax); /* -Wall */
    SP -= items;
    {
	IShellLink *	ilink = INT2PTR(IShellLink *, SvIV(ST(0)))
;
	IPersistFile *	ifile = INT2PTR(IPersistFile *, SvIV(ST(1)))
;
	unsigned short	hotkey = (unsigned short)SvUV(ST(2))
;
#line 394 "Shortcut.xs"
    HRESULT hres;
    hres = ilink->SetHotkey(hotkey);
    if (SUCCEEDED(hres))
	XSRETURN_YES;
    else
	XSRETURN_NO;
#line 741 "Shortcut.c"
	PUTBACK;
	return;
    }
}


XS_EUPXS(XS_Win32__Shortcut__GetHotkey); /* prototype to pass -Wmissing-prototypes */
XS_EUPXS(XS_Win32__Shortcut__GetHotkey)
{
    dVAR; dXSARGS;
    if (items != 2)
       croak_xs_usage(cv,  "ilink, ifile");
    PERL_UNUSED_VAR(ax); /* -Wall */
    SP -= items;
    {
	IShellLink *	ilink = INT2PTR(IShellLink *, SvIV(ST(0)))
;
	IPersistFile *	ifile = INT2PTR(IPersistFile *, SvIV(ST(1)))
;
#line 407 "Shortcut.xs"
    HRESULT hres;
    unsigned short hotkey;
    hres = ilink->GetHotkey(&hotkey);
    if (SUCCEEDED(hres))
	XSRETURN_IV(hotkey);
    else
	XSRETURN_NO;
#line 769 "Shortcut.c"
	PUTBACK;
	return;
    }
}


XS_EUPXS(XS_Win32__Shortcut__SetIconLocation); /* prototype to pass -Wmissing-prototypes */
XS_EUPXS(XS_Win32__Shortcut__SetIconLocation)
{
    dVAR; dXSARGS;
    if (items != 4)
       croak_xs_usage(cv,  "ilink, ifile, location, number");
    PERL_UNUSED_VAR(ax); /* -Wall */
    SP -= items;
    {
	IShellLink *	ilink = INT2PTR(IShellLink *, SvIV(ST(0)))
;
	IPersistFile *	ifile = INT2PTR(IPersistFile *, SvIV(ST(1)))
;
	char *	location = (char *)SvPV_nolen(ST(2))
;
	int	number = (int)SvIV(ST(3))
;
#line 423 "Shortcut.xs"
    HRESULT hres;
    hres=ilink->SetIconLocation(location,number);
    if (SUCCEEDED(hres))
	XSRETURN_YES;
    else
	XSRETURN_NO;
#line 800 "Shortcut.c"
	PUTBACK;
	return;
    }
}


XS_EUPXS(XS_Win32__Shortcut__GetIconLocation); /* prototype to pass -Wmissing-prototypes */
XS_EUPXS(XS_Win32__Shortcut__GetIconLocation)
{
    dVAR; dXSARGS;
    if (items != 2)
       croak_xs_usage(cv,  "ilink, ifile");
    PERL_UNUSED_VAR(ax); /* -Wall */
    SP -= items;
    {
	IShellLink *	ilink = INT2PTR(IShellLink *, SvIV(ST(0)))
;
	IPersistFile *	ifile = INT2PTR(IPersistFile *, SvIV(ST(1)))
;
#line 436 "Shortcut.xs"
    HRESULT hres;
    int number;
    char location[MAX_PATH];
    hres = ilink->GetIconLocation((LPSTR)location, MAX_PATH, &number);
    if (SUCCEEDED(hres)) {
	// [dada] does actually returns nothing?
	// printf("_GetIconLocation: location=\"%s\",%d\n",location,number);
	XST_mPV(0,location);
	XST_mIV(1,number);
	XSRETURN(2);
    }
    else {
	XSRETURN_NO;
    }
#line 835 "Shortcut.c"
	PUTBACK;
	return;
    }
}


XS_EUPXS(XS_Win32__Shortcut__Resolve); /* prototype to pass -Wmissing-prototypes */
XS_EUPXS(XS_Win32__Shortcut__Resolve)
{
    dVAR; dXSARGS;
    if (items != 3)
       croak_xs_usage(cv,  "ilink, ifile, flags");
    PERL_UNUSED_VAR(ax); /* -Wall */
    SP -= items;
    {
	IShellLink *	ilink = INT2PTR(IShellLink *, SvIV(ST(0)))
;
	IPersistFile *	ifile = INT2PTR(IPersistFile *, SvIV(ST(1)))
;
	long	flags = (long)SvIV(ST(2))
;
#line 458 "Shortcut.xs"
    HRESULT hres;
    // [dada] hwnd=NULL, not sure about it...
    hres = ilink->Resolve(NULL, flags);
    if (SUCCEEDED(hres)) {
	char path[MAX_PATH];
	WIN32_FIND_DATA file;
	hres = ilink->GetPath((LPSTR)path, MAX_PATH, &file, 0);
	if (SUCCEEDED(hres))
	    XSRETURN_PV(path);
	else
	    XSRETURN_NO;
    }
    else
	XSRETURN_NO;
#line 872 "Shortcut.c"
	PUTBACK;
	return;
    }
}


XS_EUPXS(XS_Win32__Shortcut__Save); /* prototype to pass -Wmissing-prototypes */
XS_EUPXS(XS_Win32__Shortcut__Save)
{
    dVAR; dXSARGS;
    if (items != 3)
       croak_xs_usage(cv,  "ilink, ifile, filename");
    PERL_UNUSED_VAR(ax); /* -Wall */
    SP -= items;
    {
	IShellLink *	ilink = INT2PTR(IShellLink *, SvIV(ST(0)))
;
	IPersistFile *	ifile = INT2PTR(IPersistFile *, SvIV(ST(1)))
;
	LPSTR	filename = (LPSTR)SvPV_nolen(ST(2))
;
#line 480 "Shortcut.xs"
    HRESULT hres;
    unsigned short wfilename[MAX_PATH];
    MultiByteToWideChar(CP_ACP, 0, filename, -1, (wchar_t *)wfilename, MAX_PATH);
    hres = ifile->Save((wchar_t *)wfilename, TRUE);
    if (SUCCEEDED(hres))
	XSRETURN_YES;
    else
	XSRETURN_NO;
#line 903 "Shortcut.c"
	PUTBACK;
	return;
    }
}


XS_EUPXS(XS_Win32__Shortcut__Load); /* prototype to pass -Wmissing-prototypes */
XS_EUPXS(XS_Win32__Shortcut__Load)
{
    dVAR; dXSARGS;
    if (items != 3)
       croak_xs_usage(cv,  "ilink, ifile, filename");
    PERL_UNUSED_VAR(ax); /* -Wall */
    SP -= items;
    {
	IShellLink *	ilink = INT2PTR(IShellLink *, SvIV(ST(0)))
;
	IPersistFile *	ifile = INT2PTR(IPersistFile *, SvIV(ST(1)))
;
	LPSTR	filename = (LPSTR)SvPV_nolen(ST(2))
;
#line 496 "Shortcut.xs"
    HRESULT hres;
    unsigned short wfilename[MAX_PATH];
    MultiByteToWideChar(CP_ACP, 0, filename, -1, (wchar_t *)wfilename, MAX_PATH);
    hres = ifile->Load((wchar_t *)wfilename, STGM_READ);
    if (SUCCEEDED(hres))
	XSRETURN_YES;
    else
	XSRETURN_NO;
#line 934 "Shortcut.c"
	PUTBACK;
	return;
    }
}


XS_EUPXS(XS_Win32__Shortcut__Exit); /* prototype to pass -Wmissing-prototypes */
XS_EUPXS(XS_Win32__Shortcut__Exit)
{
    dVAR; dXSARGS;
    PERL_UNUSED_VAR(cv); /* -W */
    PERL_UNUSED_VAR(ax); /* -Wall */
    SP -= items;
    {
#line 509 "Shortcut.xs"
    CoUninitialize();
    XSRETURN_YES;
#line 952 "Shortcut.c"
	PUTBACK;
	return;
    }
}

#ifdef __cplusplus
extern "C"
#endif
XS_EXTERNAL(boot_Win32__Shortcut); /* prototype to pass -Wmissing-prototypes */
XS_EXTERNAL(boot_Win32__Shortcut)
{
    dVAR; dXSARGS;
#if (PERL_REVISION == 5 && PERL_VERSION < 9)
    char* file = __FILE__;
#else
    const char* file = __FILE__;
#endif

    PERL_UNUSED_VAR(cv); /* -W */
    PERL_UNUSED_VAR(items); /* -W */
#ifdef XS_APIVERSION_BOOTCHECK
    XS_APIVERSION_BOOTCHECK;
#endif
    XS_VERSION_BOOTCHECK;

        newXS("Win32::Shortcut::constant", XS_Win32__Shortcut_constant, file);
        newXS("Win32::Shortcut::_Instance", XS_Win32__Shortcut__Instance, file);
        newXS("Win32::Shortcut::_Release", XS_Win32__Shortcut__Release, file);
        newXS("Win32::Shortcut::_SetDescription", XS_Win32__Shortcut__SetDescription, file);
        newXS("Win32::Shortcut::_GetDescription", XS_Win32__Shortcut__GetDescription, file);
        newXS("Win32::Shortcut::_SetPath", XS_Win32__Shortcut__SetPath, file);
        newXS("Win32::Shortcut::_GetPath", XS_Win32__Shortcut__GetPath, file);
        newXS("Win32::Shortcut::_SetArguments", XS_Win32__Shortcut__SetArguments, file);
        newXS("Win32::Shortcut::_GetArguments", XS_Win32__Shortcut__GetArguments, file);
        newXS("Win32::Shortcut::_SetWorkingDirectory", XS_Win32__Shortcut__SetWorkingDirectory, file);
        newXS("Win32::Shortcut::_GetWorkingDirectory", XS_Win32__Shortcut__GetWorkingDirectory, file);
        newXS("Win32::Shortcut::_SetShowCmd", XS_Win32__Shortcut__SetShowCmd, file);
        newXS("Win32::Shortcut::_GetShowCmd", XS_Win32__Shortcut__GetShowCmd, file);
        newXS("Win32::Shortcut::_SetHotkey", XS_Win32__Shortcut__SetHotkey, file);
        newXS("Win32::Shortcut::_GetHotkey", XS_Win32__Shortcut__GetHotkey, file);
        newXS("Win32::Shortcut::_SetIconLocation", XS_Win32__Shortcut__SetIconLocation, file);
        newXS("Win32::Shortcut::_GetIconLocation", XS_Win32__Shortcut__GetIconLocation, file);
        newXS("Win32::Shortcut::_Resolve", XS_Win32__Shortcut__Resolve, file);
        newXS("Win32::Shortcut::_Save", XS_Win32__Shortcut__Save, file);
        newXS("Win32::Shortcut::_Load", XS_Win32__Shortcut__Load, file);
        newXS("Win32::Shortcut::_Exit", XS_Win32__Shortcut__Exit, file);

    /* Initialisation Section */

#line 202 "Shortcut.xs"
    CoInitialize(NULL);

#line 1005 "Shortcut.c"

    /* End of Initialisation Section */

#if (PERL_REVISION == 5 && PERL_VERSION >= 9)
  if (PL_unitcheckav)
       call_list(PL_scopestack_ix, PL_unitcheckav);
#endif
    XSRETURN_YES;
}

